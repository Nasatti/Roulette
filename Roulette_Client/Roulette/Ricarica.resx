<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAtPHgRLDx/LiY8eTsmOHQ7JjduLh4taREAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJj+MFC9F
        imcuRIivLUKF5yxAgv4rPn7+KTx5/ig6df4mN2/+IzVq/SIyZeceLl6vHSpZZxkmTBQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMEKLKjBF
        jaQwRY35MEWL/jdKh/42RXf+Ljtl/io1WP4mMFD+JC5O/iYxUv4oNFj+Kjdf/ig1Yf4eLFn+GyhT+Rol
        TaQYHkgqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHDhxCS9E
        ipEwRo36OEuM/TRCb/0mLkn+FBov/Q0TJ/0NEyj9DhQr/RAVLv0QFi/9EBcw/RAXMP0PFzD9FBs0/R8m
        QP0jLU39HypP/RciRvsVH0GRABw4CQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACU8
        fyItQ4TVNkmL/jZCbP4bITn+DRMq/g8VK/4OFCn+DRMo/g0TKf4OFCr+DxUs/hAWL/4RGDL+ERk1/RIb
        OP4THTv+FB49/hMcOf4YIDv+IClG/hkjQ/4THTvVDxY0IgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAmOXIoKT186DtLf/4kLEb+DxYt/hAWL/4PFi3+EBYu/i8zYP44O0r+QEFF/kVFY/5OTs/+TU3P/kJD
        YP48PkP9ODxY/k9QYf4wNk3+FSBB/hYhRP4VH0D+GiI+/hokQf4RGjXpDBMzKAAAAAAAAAAAAAAAAAAA
        AAAAAAAAGihdEyY3cOA6SHP9GB84/hEYM/4RGDL+FRsz/jc6Sv5ISLz+NjbH/jExc/4uLi7+LS07/jMz
        x/4zM8b+Kys4/ioqKf1bWXz+xsPC/n13ef4yN0j+GyVH/hgkSf4ZJEr+FyFA/hghPf4PFjDgDQ0oEwAA
        AAAAAAAAAAAAAAAAAAAhMWWpOkZw/hUdN/0SGjf+Eho1/iQqUv5CQ1T+Li4u/jAwZf40NMf+MjK1/isr
        Lf4qKir+MDDA/jAwvv4oKCf+KCg6/UA/uv6TkKT+S0dG/iMjI/4zNUj+JC5j/homTf4aJ0/+FyJF/hQc
        OP4PFS2pAAAAAAAAAAAAAAAAHitXOjJAbP4cJUL+Ehw6/RIbOP4pL2H+QEDF/jMzt/4tLUn+Kysr/i8v
        hv4wMMb+Kytf/iwxP/4yOa/+MDer/igtOf4nKHr9KirD/iQkXf4hISH+ISFA/iUlsv4uLr/+Jy9u/hsp
        Uv4cKVP+GSRI/hAYMf4MECk9AAAAAAAAAAAiMFuqLTdZ/hQePf4UHjz+HiZA/jg4Pv4vL3f+MTHB/jEx
        wP4qKlf+LjVO/jFAov4tQYf+Jzl0/iQ1av4jM2f+JDVq/iY3df4mMn/+ISUz/h8fUP4jI7z+IiK7/h0d
        a/4iIyj+HytO/h0rVv4eK1f+FiFD/g0TKqoAAAAAAABVAzE9ZvUWIED+FR9A/hQePv01N23+Kio1/igo
        KP4oKDj+LC2R/jJCqf4oO3X+JTZs/iU2bP4kNWv+JDRq/iMzZ/4iMmT+IDBh/SAuXv4gLl3+IiyE/h4e
        hf4YGCn+FhYW/hcXPf4gJHj+HixY/h4sWv4eK1X+EBgy9gAAAAMaJE4xLThd/hUhQv4WIEL+GiNP/TY2
        yP4tLcP+KiqU/icnWP4tPnP+JDVr/iQ1a/4lNmv+JTZs/iU1a/4kNGn+IzNn/iExY/4gL1/9Hy1c/h4s
        Wf4dK1b+GyZG/hgYY/4aGqb+GRm//hsbwf4dKWH+Hy5d/iAvXf4XIUP+DxQzMig0WT8mMVb+FiJF/hch
        Rf4gJ0L9JiZL/icna/4nJ4z+LDWi/iQ0af4kNGn+JDRq/iQ1a/4lNmv+JTZs/iQ0av4jM2b+ITBh/h8u
        XP0eLFj+HSpW/hwpU/4bKVL+GB16/hQUbP4SEkX+Dw8d/hkjQv4gL2D+IS9g/h0pU/4QGDQ/OERtPx4q
        UP4XI0j+GCNI/hwjS/0jI1L+IiJF/iAgOf4mM2L+IjNm/iMzZ/4jM2j+JDRp/iQ1a/4vRIj+L0OI/ixA
        gf4nOXL+HStX/RwpVP4bKFH+GydQ/honT/4XIz7+Dx8Y/g4eF/4NHRb+GSZC/iIwYv4hMWP+IS9c/hQc
        QD81QWo+HSpQ/hgkSv4ZJUr+GiNg/SUlwf4kJML+IyPC/iQxe/4iMWT+IjJl/iIyZf4iM2b+MkiR/ig7
        dv4nOXP+Jzlz/ig6dP4mN2/9GiZO/homTf4ZJkz+GSVM/ho4S/4diFX+HIdV/hqFU/4ePVr+IzJl/iIy
        Zf4iMWD+FBw9Pi06aCcfLFX+GSVN/homTf4ZJk39Ghsz/hoaJP4YGBj+HSZC/iEwYf4hMGH+ITBh/iU2
        bP4lN27+JDVr/nd8lf5kaIH+JDVs/iQ2a/0aJ0/+GCNI/hgjSP4YI0j+FBp3/hAVtv4QJKX+ETGD/iMz
        Z/4kM2j+JDNn/iEwXv4TGTkoAABVAyEvW/IaJ1D+GyhQ/hooUf0YIED+GRlj/hoai/4bHKf+Hy1j/iAu
        Xv4fLlz+Q01y/iIxYf4gL2H+saqp/pCJiP4gL2H+IjBf/TxDX/4WIUP+FyFE/hUfQf4HCAz+BgYk/gcH
        Sf4YImj+JTVr/iU1av4kNGr+IC1Y8gAAAAMAAAAAIC9epxsoU/0cKVP+HClT/R0qVP0XHIL9FhaI/RMT
        RP0TFiT9HStc/h0rWP14eIf9rair/VVZcP2up6b9kImI/Wdrgv2po6f9YWBr/RQfP/0UHT/9Dg+e/QoK
        mv0FBVP9DhQs/SU3bv0lNm39JTZs/SY3bf0cKE6oAAAAAAAAAAAfLVs4Hi1a/h0rVv4dK1f9HixY/h4s
        Wf4UGi3+Dw82/hISnf4TFan+Fh0+/hooUP5FSV/+lI6N/n52df6Gfnz+lY6O/jo8Tf0THDz+DxVh/gQF
        Dv4DAyf+BwaM/hMbfP4mOHH+Jjhw/iY4b/4mN2/+Jzdp/hEePDsAAAAAAAAAAAAAAAAfL16oHy1a/h4s
        Wf0fLVv+Hy5c/iAvXv4aJGr+EBKL/goKJ/4ICAj+DQ6H/hsefP55dXj+x8TD/qKdnP5jXWD+FRYr/QME
        If4ICLL+BgaT/gUHGP4bJ07+KDp1/ig6c/4nOXL+Jzlx/is8dP4eKlGoAAAAAAAAAAAAAAAAAAAAABwq
        VRIhMGHfIC9d/SAvXv4gL1/+ITBh/iIxY/4iMmT+GCNF/g8UTv45N57+raes/o6Jif7Qz87+pJ+e/oB5
        kv6blJP9Kigp/g0TUP4cKHT+KDt4/ik8eP4pO3b+KDt1/ig6dP4rPXb+JjVi3w4OOBIAAAAAAAAAAAAA
        AAAAAAAAAAAAABonVScjMmTnIjFi/iExYv4iMmP+IzNm/iQ0aP4lNWv+JTZt/nh9l/5ATHX+GyhQ/j5I
        dv41P3P+HSpz/kpXif1tc5L+Kj18/is+e/4qPXr+Kj15/ik8eP4pO3f+LkB6/io6aegTGjonAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABYlUiIjNGXVJzdq/iMzZv4jNGj+JDVq/iU2bf4mN2/+Jjhx/ic6
        dP4oPHf+Kjx5/io+e/4rPXz+Kj58/So+ff4rPnz+Kz58/io9e/4qPXr+KTx5/jRHgv4sOmjVFh5DIgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcVQkjMWGQKjpw+yk5bv4lNmz+Jjdu/ic4
        cP4nOXP+KDp1/ig7d/4qPXn+Kj57/is9fP4qPnz9Kz99/is/ff4rPnz+Kj17/jNGg/42SH77IzFakAAc
        OAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYJE4qKDdppS4+
        c/kxQ3v+KTtz/ic5c/4oOnb+KDt4/io9ef4qPnv+Kj18/io+e/0qPn3+LkKB/jtPjP43R335LDppphIe
        QioAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAGihQEx4qWmYwQHOvMUF15zJEe/41R4H+OEuG/jhLh/44SoX+NkiA/jZGeuc0RHavGyhSZg0a
        QxMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAESJEDxwnTy0aJ1M6GidPOhYnTy0RIkQPAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////4H///gAH//gAAf/gAAB/wAAAP4AAAB8AAAAPAAAADgAAAAYAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAHAAAADwAAAA+AAAAfwAAAP+AAAH/4A
        AH//gAH///gf//////////////////////8=
</value>
  </data>
</root>